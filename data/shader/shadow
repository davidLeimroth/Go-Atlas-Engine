layout(binding = 6) uniform sampler2DArrayShadow cascadeMaps;

const vec2 poissonDisk[16] = vec2[](
  vec2(0.1159636f, -0.6847993f),
  vec2(-0.04063215f, 0.0732412f),
  vec2(-0.5671037f, -0.6256651f),
  vec2(-0.4569176f, -0.175979f),
  vec2(0.517299f, -0.1095803f),
  vec2(0.610924f, -0.6100475f),
  vec2(-0.9603067f, -0.0002735546f),
  vec2(0.9396403f, -0.2230212f),
  vec2(-0.4805221f, 0.2525214f),
  vec2(-0.7926834f, 0.5755413f),
  vec2(-0.2899438f, 0.6315116f),
  vec2(0.09232567f, 0.9606919f),
  vec2(0.3653378f, 0.6443261f),
  vec2(0.8239012f, 0.478811f),
  vec2(-0.07792759f, -0.3342873f),
  vec2(-0.281228f, -0.9247693f) 
);

float offsetLookup(float cascadeIndex, vec3 shadowCoords, vec2 offset) {
	
	return texture(cascadeMaps, 
	 vec4(shadowCoords.xy + offset, cascadeIndex, shadowCoords.z));
	
}

float CalculateCascadedShadow(Light light, vec3 fragmentPosition, float cosTheta) {

	// We only allow 4 cascades
	float distance = -fragmentPosition.z;
	int cascadeIndex = 0;
	cascadeIndex = distance >= light.shadow.cascades[0].distance ? 1 : cascadeIndex;
	cascadeIndex = distance >= light.shadow.cascades[1].distance ? 2 : cascadeIndex;
	cascadeIndex = distance >= light.shadow.cascades[2].distance ? 3 : cascadeIndex;
	cascadeIndex = distance >= light.shadow.cascades[3].distance ? 4 : cascadeIndex;
	cascadeIndex = min(light.shadow.cascadeCount - 1, cascadeIndex);

	mat4 cascadeMatrix = light.shadow.cascades[0].cascadeSpace;
	cascadeMatrix = cascadeIndex > 0 ? light.shadow.cascades[1].cascadeSpace : cascadeMatrix;
	cascadeMatrix = cascadeIndex > 1 ? light.shadow.cascades[2].cascadeSpace : cascadeMatrix;
	cascadeMatrix = cascadeIndex > 2 ? light.shadow.cascades[3].cascadeSpace : cascadeMatrix;
	cascadeMatrix = cascadeIndex > 3 ? light.shadow.cascades[4].cascadeSpace : cascadeMatrix;
	
	float bias = clamp(0.005 * tan(acos(cosTheta)), 0.0, 0.001);

	vec4 shadowCoords = cascadeMatrix * vec4(fragmentPosition, 1.0f);
	shadowCoords.z -= bias;
	shadowCoords.xyz /= shadowCoords.w;
	shadowCoords.w = clamp((length(fragmentPosition) + 2.0f - light.shadow.distance) * 0.5f, 0.0f, 1.0f);
	
	shadowCoords.xyz = shadowCoords.xyz * 0.5f + 0.5f;
	
	if (shadowCoords.w > 0.999f)
		return 1.0f;
	
	float visibility = 1.0f;

	float partialSum = 1.0f / float(light.shadow.sampleCount);

	for (int i = 0; i < light.shadow.sampleCount; i++) {
		
		vec2 offset = poissonDisk[i] * light.shadow.sampleRange / (light.shadow.resolution);

		float factor = offsetLookup(float(cascadeIndex), shadowCoords.xyz, offset);
		
        visibility -= partialSum * (1.0f - factor);
		
    }
	
	return clamp(visibility + shadowCoords.w, 0.0f, 1.0f);
	
}