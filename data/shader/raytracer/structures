// About alignement in GLSL: 
// A structure has to be a mupltiple of the size of
// it's largest member, e.g. for a bunch of floats it's one byte
// Every vec3 gets rounded up to 16 bytes, which means the structure
// has to be a size of multiple of 16 bytes.

struct Ray {
	
	vec3 origin;
	vec3 direction;
	vec3 inverseDirection;
	
};

struct AABB {
	
	float minX;
	float minY;
	float minZ;
	float maxX;
	float maxY;
	float maxZ;
	
};

struct PackedTriangle {
	
	vec4 v0;
	vec4 v1;
	vec4 v2;
	vec4 d0;
	vec4 d1;
	
};

struct Triangle {
	
	vec3 v0;
	vec3 v1;
	vec3 v2;
	
	vec3 n0;
	vec3 n1;
	vec3 n2;
	
	vec3 t;
	vec3 bt;
	
	vec2 uv0;
	vec2 uv1;
	vec2 uv2;
	
	int materialIndex;	
	
};

struct Texture {
	
	int layer;
	
	int x;
	int y;
	
	int width;
	int height;
	
};

struct Material {
	
	float diffR;
	float diffG;
	float diffB;
	
	float emissR;
	float emissG;
	float emissB;
	
	float specularIntensity;
	float specularHardness;
	
	Texture diffuseTexture;
	Texture normalTexture;

};



struct BVHNode {
	
	uint data1;
	uint data2;
	AABB aabb;
	
};

struct Light {

    vec3 location;
	vec3 direction;
	
    vec3 color;
	float ambient;
	
	float scatteringFactor;
		
	float radius;

};